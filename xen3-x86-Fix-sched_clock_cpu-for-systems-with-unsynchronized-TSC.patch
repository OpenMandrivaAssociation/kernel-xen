From: Dimitri Sivanich <sivanich@sgi.com>
Subject: x86: Fix sched_clock_cpu for systems with unsynchronized TSC
Patch-mainline: not yet
References: bnc#582878, FATE#306952
Patch-mainline: not yet

On UV systems, the TSC is not synchronized across blades.  The
sched_clock_cpu() function is returning values that can go
backwards  (I've seen as much as 8 seconds) when switching
between cpus.

As each cpu comes up, early_init_intel() will currently set the
sched_clock_stable flag true.  When mark_tsc_unstable() runs, it
clears the flag, but this only occurs once (the first time a cpu
comes up whose TSC is not synchronized with cpu 0).  After this,
early_init_intel() will set the flag again as the next cpu comes
up.

Only set sched_clock_stable if tsc has not been marked unstable.

Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
Acked-by: Venkatesh Pallipadi <venkatesh.pallipadi@intel.com>
Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
LKML-Reference: <20100301174815.GC8224@sgi.com>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Signed-off-by: Rafael J. Wysocki <rjw@suse.de>

Automatically created from "patches.arch/x86-Fix-sched_clock_cpu-for-systems-with-unsynchronized-TSC.patch" by xen-port-patches.py

--- sle11sp1-2010-03-11.orig/arch/x86/kernel/cpu/intel.c	2010-03-11 09:10:10.000000000 +0100
+++ sle11sp1-2010-03-11/arch/x86/kernel/cpu/intel.c	2010-03-11 09:32:53.000000000 +0100
@@ -70,7 +70,9 @@ static void __cpuinit early_init_intel(s
 	if (c->x86_power & (1 << 8)) {
 		set_cpu_cap(c, X86_FEATURE_CONSTANT_TSC);
 		set_cpu_cap(c, X86_FEATURE_NONSTOP_TSC);
+#ifndef CONFIG_XEN
 		if (!check_tsc_unstable())
+#endif
 			sched_clock_stable = 1;
 	}
 
